##############################################################################
# Copyright (c) 2019-2022, Lawrence Livermore National Security, LLC and
# other Serac Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (BSD-3-Clause)
##############################################################################

import glob
import os
import shutil
import sys

glue(independent=True)

# Keeps the individual test's output
glue(keep=True)

#
# Handle required environment variables that define project structure
#

# Check for required environment variables
for var in ["ATS_SERAC_BIN_DIR", "ATS_SERAC_REPO_DIR", "ATS_SERAC_REBASELINE"]:
    if not os.environ.get(var):
        print("ERROR: Required environment variable not found: {0}".format(var))
        sys.exit(1)

# Helpful directories
serac_bin_dir = os.environ.get("ATS_SERAC_BIN_DIR")
serac_repo_dir = os.environ.get("ATS_SERAC_REPO_DIR")
serac_integration_test_dir = os.path.join(serac_repo_dir, "tests", "integration")

# Flags
should_rebaseline = bool(int(os.environ.get("ATS_SERAC_REBASELINE")))
should_baseline = bool(int(os.environ.get("ATS_SERAC_BASELINE")))

#
# Add variables to be used in individually sourced test files with define()
#

# Path to serac driver
serac_path = os.path.join(serac_bin_dir, "serac")
define(serac_path=serac_path)

# Path to input files directory
serac_input_files_dir = os.path.join(serac_repo_dir, "data", "input_files")
define(serac_input_files_dir=serac_input_files_dir)

# Path to input files directory
serac_test_scripts_dir = os.path.join(serac_repo_dir, "scripts", "testing")
define(serac_test_scripts_dir=serac_test_scripts_dir)

# Tolerance checker path
serac_tolerance_checker = os.path.join(serac_test_scripts_dir, "tolerance_test.py")
define(serac_tolerance_checker=serac_tolerance_checker)

# Tolerance json file(s) directory
serac_tolerance_json = os.path.join(serac_integration_test_dir, "tolerances")
define(serac_tolerance_json=serac_tolerance_json)

#
# Wrapper for ATS's test()/testif()
#

def tolerance_test(name, input_file, num_mpi_tasks=1, tolerance=0.00001,
    restart_cycle=None):
    """
    # _serac_tolerance_test_start
    Adds a test and dependent tolerance check for the given arguments

    Parameters
    ----------
    name : str
        The name of the test
    input_file : str
        Path to the input file
    num_mpi_tasks : int, optional
        The number of MPI tasks (default is 1)
    tolerance : int, optional
        The allowed tolerance in test results (default is 0.00001)

    Note: Paths in this function are relative to where the function is called from
          not this file.
    # _serac_tolerance_test_end
    """

    output_dir = os.path.abspath(name) + "_output"
    test_summary_file = "{0}/summary.json".format(output_dir)

    output_restart_dir = os.path.abspath(name) + "_output_restart"
    test_restart_summary_file = "{0}/summary.json".format(output_restart_dir)

    baseline_summary_file = os.path.abspath("{0}.json".format(name))

    tolerance_arg = ""
    if ".json" in str(tolerance):
        tolerance_arg = "--tolerance-file={0}".format(tolerance)
    else:
        tolerance_arg = "--tolerance={0}".format(tolerance)

    if not should_rebaseline:
        # Run serac regularly
        test_args = "-i {0} -o {1}".format(input_file, output_dir)
        my_test = test(
            executable=serac_path,
            clas=test_args,
            label=name,
            np=num_mpi_tasks)

    if should_baseline or should_rebaseline:

        # TODO create either a python function or bash script, and use
        # testif() below

        # Create baseline file
        if os.path.exists(test_summary_file):
            print("Rebaselining {0}".format(name))
            shutil.copyfile(test_summary_file, baseline_summary_file)
        else:
            print("Warning: tried to copy test file that doesn't exist:\n{0}".format(
                test_summary_file))
    elif restart_cycle is not None:
        # Restart tolerance test ----------------------------------------------

        # Run serac with restart option
        test_restart_args = "-i {0} -o {1} -c {2}".format(input_file,
            output_restart_dir, int(restart_cycle))
        my_test_restart = testif(
            my_test,
            executable=serac_path,
            clas=test_restart_args,
            label="{0}_restart".format(name),
            np=num_mpi_tasks)

        # Tolerance test of regular serac vs reset serac
        checker_args = "--baseline={0} --test={1} {2}".format(
            test_summary_file, test_restart_summary_file, tolerance_arg)
        my_checker = testif(
            my_test_restart,
            executable=serac_tolerance_checker,
            clas=checker_args,
            label=name,
            nosrun=True)

        # Tolerance test of baseline vs reset serac
        checker_args = "--baseline={0} --test={1} {2}".format(
            baseline_summary_file, test_restart_summary_file, tolerance_arg)
        my_checker = testif(
            my_test_restart,
            executable=serac_tolerance_checker,
            clas=checker_args,
            label=name,
            nosrun=True)
    else:
        # Regular tolerance test ----------------------------------------------

        # Add checker args
        checker_args = "--baseline={0} --test={1} {2}".format(
            baseline_summary_file, test_summary_file, tolerance_arg)

        # Add checker for driver test
        my_checker = testif(
            my_test,
            executable=serac_tolerance_checker,
            clas=checker_args,
            label=name,
            nosrun=True)


define(tolerance_test=tolerance_test)

#
# Add individual tests found in subdirectories
#

test_files = glob.glob(os.path.join(serac_integration_test_dir, "*/*", "*.ats"))
print("~~~~~~~~~~~~~~~~~~~~~~~~~~")
for test_file in test_files:
    source(test_file)
print("~~~~~~~~~~~~~~~~~~~~~~~~~~")
